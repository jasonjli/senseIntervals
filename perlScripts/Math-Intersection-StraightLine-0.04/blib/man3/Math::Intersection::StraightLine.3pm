.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.35
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Math::Intersection::StraightLine 3"
.TH Math::Intersection::StraightLine 3 "2006-11-26" "perl v5.8.9" "User Contributed Perl Documentation"
.SH "NAME"
Math::Intersection::StraightLine \- Calculate intersection point for two lines
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  use Math::Intersection::StraightLine;
\&  use Data::Dumper;
\&  my $finder = Math::Intersection::StraightLine->new();
.Ve
.PP
.Vb 5
\&  # one intersection point
\&  my $vector_a = [[20,60],[-40,0]];
\&  my $vector_b = [[50,80],[0,50]];
\&  my $result = $finder->vectors($vector_a,$vector_b);
\&  print Dumper($result);
.Ve
.PP
.Vb 5
\&  # no intersection point
\&  my $point_a = [[20,60],[30,10]];
\&  my $point_b = [[50,80],[50,75]];
\&  $result = $finder->point_limited($point_a,$point_b);
\&  print Dumper($result);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module calculates the intersection point of two straight lines (if one
exists). It returns 0, if no intersection point exists. If the lines have an
intersection point, the coordinates of the point are the returnvalue. If the
given lines have infinite intersection points, \-1 is returned.
Math::Intersection::StraightLine can handle four types of input:
.Sh "functions"
.IX Subsection "functions"
Often straight lines are given in functions of that sort: y = 9x + 3
.Sh "vectors"
.IX Subsection "vectors"
the vector assignment of the line
.PP
.Vb 2
\&  (10)     +     lambda(30)
\&  (20)                 (50)
.Ve
.Sh "points"
.IX Subsection "points"
The straight lines are described with two vectors to points on the line
.PP
.Vb 2
\&  X1 = (10)             X2 = (40)
\&       (20)                  (70)
.Ve
.Sh "point_limited"
.IX Subsection "point_limited"
If the module should test, if an intersection point of two parts exists
.PP
.Vb 2
\&  X1 = (10)             X2 = (40)
\&       (20)                  (70)
.Ve
.PP
The following example should clarify the difference between \f(CW\*(C`points\*(C'\fR and
\&\f(CW\*(C`point_limited\*(C'\fR:
.PP
.Vb 3
\&  $line_a = [[20,60],[30,10]];
\&  $line_b = [[50,80],[50,75]];
\&  $result = $finder->points($line_a,$line_b);
.Ve
.PP
.Vb 3
\&  $line_a_part = [[20,60],[30,10]];
\&  $line_b_part = [[50,80],[50,75]];
\&  $result = $finder->point_limited($line_a_part,$line_b_part);
.Ve
.PP
The first example returns the intersection point 50/\-90, the second returns
0 because \f(CW$line_a_part\fR is just a part of \f(CW$line_a\fR and has no intersection
point with the part of line b.
.PP
In the first example, the lines are changed to the vectors of the lines.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.Vb 4
\&  $vector_a = [[20,60],[30,10]];
\&  $vector_b = [[50,80],[60,30]];
\&  $result = $finder->point_limited($vector_a,$vector_b);
\&  ok($result == 0,'parallel lines(diagonal)');
.Ve
.PP
.Vb 4
\&  $vector_a = [[20,60],[20,10]];
\&  $vector_b = [[60,80],[20,10]];
\&  $result = $finder->vectors($vector_a,$vector_b);
\&  ok($result == -1,'overlapping vectors');
.Ve
.PP
.Vb 4
\&  $vector_a = [[20,60],[30,10]];
\&  $vector_b = [[50,80],[50,75]];
\&  $result = $finder->points($vector_a,$vector_b);
\&  ok($result->[0] == 50 && $result->[1] == -90,'Lines with one intersection point');
.Ve
.PP
.Vb 4
\&  # test y=9x+5 and y=-3x-2
\&  my $function_one = [9,5];
\&  my $function_two = [-3,-2];
\&  $result = $finder->functions($function_one,$function_two);
.Ve
.SH "MISC"
.IX Header "MISC"
Note! The coordinates for the intersection point can be imprecise!
.PP
.Vb 4
\&  # test y=9x+5 and y=-3x-2
\&  my $function_one = [9,5];
\&  my $function_two = [-3,-2];
\&  $result = $finder->functions($function_one,$function_two);
.Ve
.PP
returns
.PP
.Vb 4
\&  $VAR1 = [
\&          '-0.583333333333333', # this is imprecise
\&          '-0.25'
\&          ];
.Ve
.SH "OTHER METHODS"
.IX Header "OTHER METHODS"
.Sh "new"
.IX Subsection "new"
returns a new object of \f(CW\*(C`Math::Intersection::StraightLine\*(C'\fR
.SH "AUTHOR"
.IX Header "AUTHOR"
Renee Baecker, <module@renee\-baecker.de>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2005 by Renee Baecker
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.6 or,
at your option, any later version of Perl 5 you may have available.
